* Why oh Hy?
* Prelude
This presentation will discuss Hy and give some examples of use.
- What is Hy?
- Why might coders want to use Hy?
- Generally, how does Hy work?
- A very rapid walkthrough
  - Basics: data, basic patterns
  - Functional patterns
  - An overview of what hy does
* Lisp to Python's AST
Hy is a Lisp that compiles to Python's abstract syntax tree (AST). From that AST code, Python interprets or compiles normally. This allows Hy code and Python code to be used in each other.
* Why Use Hy?
- Lispers might prefer thinking in a Lispy way while *gaining Python's ecosystem*.
  - Numpy
  - Scikit-learn
  - Keras
  - Tensorflow
  - Flask
- Pythonistas might like to use a python code base, and learn Lisp idioms by porting.
- Hy can be used to extend the syntax of normal Python, and, since Hy compiles to Python AST code, it works.
- Hy has 'defmacro', so it can be used to build boilerplate Python AST code based on a small number of parameters - *CODE WRITING CODE*.
* An Overview of What Hy Does
** Hy 
 - Reads in code written in a Lispy syntax, contained in *foo.hy* files,
 - Tokenizes it into a Hy AST,
 - Transforms that AST into an equivalent Python AST,
 - (And this Python AST can be interpreted or compiled into Python byte code).
** Hy code can
- make use of Python modules
- evaluate Pythonic code
** By including Hy in a Python file
- Python code can make use of Hy modules, using normal Python syntax.
- Python code can evalute Hy code.
*The Big Thing* This is *Fully Round Trip*.
* How do I use it?
** Get it
#+NAME: install Hy
#+BEGIN_SRC sh
$ mkdir myhy
$ chdir myhy
$ pipenv shell
$ pipenv install hy
#+END_SRC
** Use a REPL 
#+NAME: Use Hy in a REPL
#+BEGIN_SRC sh
$ hy
hy 0.19.0 using CPython 3.7.6 on Linux
=> [1 2 3]
[1, 2, 3]
#+END_SRC
*Note:* By default, representations of evaluations at the REPL are made in Python style.

To see representations in Hy style, 
#+NAME: REPL print in Hy syntax
#+BEGIN_SRC sh
$ hy --repl-output-fn=hy.contrib.hy-repr.hy-repr
=> 
> [1 2 3]
[1 2 3]
=> 
#+END_SRC
** Examples
*** ¡Hola, Amigos!
#+NAME: ¡Hola, Amigos! Python
#+BEGIN_SRC python
# In Python
print("¡Hola, Amigos!")
#+END_SRC

#+NAME: ¡Hola, Amigos! Hy
#+BEGIN_SRC hy
;; In Hy
(print "¡Hola, Amigos!")
#+END_SRC
*** Binding
**** Data 
#+NAME: assignment in Python
#+BEGIN_SRC python
# In Python
foo = 17
#+END_SRC

#+NAME: assignment in Hy
#+BEGIN_SRC hy
;; In Hy
(setv foo 17)
#+END_SRC
**** Function (I know, I know)
#+NAME: function definition in Python
#+BEGIN_SRC python
# In Python
def boo():
    print("OMIGOSH!")
    return
#+END_SRC

#+NAME: function definition in Hy
#+BEGIN_SRC hy
;; In Hy
(defn boo []
  (print "OMIGOSH!"))
#+END_SRC

#+NAME: function with a parameter in Python
#+BEGIN_SRC python
# In Python
def manyBoos(x):
    for i in range(x):
        boo()
    return
#+END_SRC

#+NAME: function definition with parameter in Hy
#+BEGIN_SRC hy
;; In Hy
(defn manyboos [x]
  (for [i (range x)]
    (boo)))

!! Show named parameters example.
#+END_SRC
*** Interlude - Built in Data Types
| Type     | Python         | Hy           | Note                                                      |
|----------+----------------+--------------+-----------------------------------------------------------|
| int      | 1              | 1            |                                                           |
| float    | 1.2            | 1.2          |                                                           |
| complex  | 4j             | 4j           |                                                           |
| bool     | True           | True         |                                                           |
| NoneType | None           | None         |                                                           |
| str      | 'hy'           | "hy"         | -- hy uses doublequotes                                   |
| bytes    | b'hy'          | b"hy"        |                                                           |
| tuple    | (1, 2, 3)      | (, 1 2 3)    | -- hy uses leading comma                                  |
| list     | [1, 2, 3]      | [1 2 3]      | -- hy does not use commas                                 |
| set      | {1, 2, 3}      | #{1 2 3}     | -- # sign                                                 |
| dict     | {1: 2, 3: 4}   | {1 2  3 4}   | -- two spaces btwn kv pairs (markdown does not show this) |
| fraction | Fraction(1, 3) | 1/3          | -- Hy reads 1/3                                           |

*** Snippets
**** Classes
***** Define a class
Definition of classes is a straightforward translation from Python syntax.
#+NAME: Class definition in Hy
#+BEGIN_SRC hy

;; In Hy
(defclass BigSur []
  (defn __init__ [self x]
    (setv self.x x))
  (defn get-x [self]
    self.x))
#+END_SRC
***** Instantiate an object
#+NAME: Object instantiation in Hy
#+BEGIN_SRC hy
;; In Hy
(setv bar (BigSur 17))
#+END_SRC
***** Access attributes
****** Using the actual symbol-name of an object
#+NAME: object-dot-attribute in Hy
#+BEGIN_SRC hy
;; In Hy
bar.x        ; evals to 17
#+END_SRC

#+NAME: object-dot-get-hyphen-attribute in Hy
#+BEGIN_SRC hy
;; In Hy
(bar.get-x)  ; evals to 17
#+END_SRC
****** Using the actual symbol-name 
#+NAME: dot-attribute-object in Hy
#+BEGIN_SRC hy
;; In Hy
(. bar x)    ; evals to 17
#+END_SRC

#+NAME: get-hyphen-attribute-object in Hy
#+BEGIN_SRC hy
;; In Hy
(.get-x bar) ; evals to 17
#+END_SRC
****** or a form that evaluates to an object

These can be used if the identity of the form to be queried will be the result of a function.
#+NAME: get-hyphen-attribute-object in Hy
#+BEGIN_SRC hy
;; In Hy
(.get-x bar) ; evals to 17
#+END_SRC

#+NAME: object is result of evaluation
#+BEGIN_SRC hy
;; In Hy
(. (gimme-object baz) x)
;; or
(.get-x (gimme-object baz))
#+END_SRC

**** Functions
***** Named functions
****** Python
#+NAME: function in Python
#+BEGIN_SRC python
# In Python
def boo():
    print("OMIGOSH!")
    return
#+END_SRC
****** Hy
#+NAME: named function in Hy
#+BEGIN_SRC hy
;; In Hy
(defn boo []
  (print "OMIGOSH!"))
#+END_SRC
****** Python
#+NAME: function with parameter and for loop in Python
#+BEGIN_SRC python
# In Python
# This demonstrates use of a parameter, and the use of a 'for' loop.
def manyBoos(x):
    for i in range(x):
        boo()
    return
#+END_SRC
****** Hy
#+NAME: function with parameter and a for loop
#+BEGIN_SRC hy
;; In Hy
;; This demonstrates use of a parameter, and the use of a 'for' loop.
(defn manyBoos [x]
  (for [i (range x)]
    (boo)))
#+END_SRC
***** Anonymous functions
Anonymous functions in Hy can be arbitrarily complex, unlike *lambdas* in Python.
#+NAME: anonymous function in Hy
#+BEGIN_SRC hy
;; In Hy
;; Anonymous functions start with *fn* symbol

;;---------| anonymous function here
;; Since map returns an (initerated) iterable, we use list to iterate through it completely.
(list (map (fn [x] (+ 10 x)) [1 2 3]))
;; returns [11 12 13]
#+END_SRC
**** Conditionals
***** `if`, et cetera
By default, Pythonic Truthiness is used.
0, length of 0, False, and None -> Falsy
This can be overcome in a variety of ways (use of lif, definition of __bool__)

***** if*
    if* is the 'basic' form.  (if* predicate consequent [optional alternative])

    if (no star) expressions are built of many if*.

    Let's examine its behavior.

****** Consequent required
    We do need a consequent ("then") clause.

    => (if* (= 2 2))
    Traceback (most recent call last):
      File "stdin-37b662c5ca9212634557fc101070aa6fe8d8a6eb", line 1, in <module>
	(if* (= 2 2))
      File "<stdin>", line 1
	(if* (= 2 2))
             ^
    hy.errors.HySyntaxError: parse error for special form 'if*': no tokens left in the stream: end of form

****** Explicit alternative not required
    We do not need an "alternative" expression)
    => (if* (= 2 2) "Success")
    'Success'

****** Default alternative is *None*
    If we do not have an alternative, and the predicate is False, None is returned (and not displayed at a REPL)
    => (if* (= 2 2000) "Success")

****** Non-None Alternative
    If we do     have an alternative, and the predicate is False, The alterntive is evaluated and returned.
    => (if* (= 2 2000) "Success" "Failure")
    'Failure'

****** Only one predicate
    For if*, no second predicate is allowed.
    => (if* (= 2 2000) "Success" (= 2 2) "Next Success")
    Traceback (most recent call last):
      File "stdin-c4b3953ba0845f848a31d2e1cbfe2659d4021178", line 1, in <module>
	(if* (= 2 2000) "Success" (= 2 2) "Next Success")
      File "<stdin>", line 1
	(if* (= 2 2000) "Success" (= 2 2) "Next Success")
					  ^
    hy.errors.HySyntaxError: parse error for special form 'if*': should have reached end of form: Next Success

***** if
****** Works with only predicate

    if can take only a predicate.

    => (if (= 2 2))
    True
    => (if (= 2 2000))
    False

****** Works with only one pair of predicate and consequent

    if can take a predicate and a consequent

    => (if (= 2 2) "happy")
    'happy'

****** Works with only one set of predicate and consequent and alternative

    if can take a predicate and a consequent and an alternative.

    => (if (= 2 2000) "happy" "sad")
    'sad'

****** Works with a series of predicate / consequent pairs
    if can take a series of predicate/consequent pairs

    => (if (= 2 2000) "happy" (= 2 2) "still happy")
    'still happy'

    if will return None if all predicates return False (unless there is another Elsy expression)

    => (if (= 2 2000) "happy" (= 2 200) "still happy")
    =>
    ;; None was returned and not displayed at the REPL

    => (if (= 2 2000) "happy" (= 2 200) "still happy" "Elsy")
    'Elsy'

***** lif (Lispy if)

    lif is evaluated like if is evaluated in Common Lisp.

    lif only returns the alternative (second expression after predicate), if the predicate evaluates to None. In Lisps, *any* value other than nil (the None of Lispworld), *even False*, is treated as Truthy.

    => (lif True "true" "false")
    'true'
    => (lif False "true" "false")
    'true'
    => (lif 0 "true" "false")
    'true'
    => (lif None "true" "false")
    'false'

    #+NAME: function with parameter and a for loop
    #+BEGIN_SRC hy
    ;; In Hy
    (setv foo True)
    (setv bar 0)

    ;; Since bar = 0, which in Python is 'Falsy', the first *test/do* clause fill be bypassed.
    ;; Since *foo* is *True*, the second do clause will be accepted.

    ;; Per https://docs.hylang.org/en/stable/language/api.html?highlight=if#if-if-if-not
    ;; "if takes any number of alternating test and then expressions, plus an optional else 
    ;; expression at the end, which defaults to None."
    ;; This is unlike if in Common Lisp 
    (if bar "first one" 
	foo  "second one")

    (if False "nope"
	False "nuh-uh"
	"oh OK")

    ;; if* operates like if in Common Lisp
    => (if* (= 2 2) "Match")
    'Match'
    => (if* (= 2 3) "Match")
    => ;; None was returned
    => (if* (= 2 3) "Match" "Miss")
    'Miss'


    ;; returns "second one"
    #+END_SRC
    If no test is truthy, `None` is returned.

    *Also available:*
    - if-not
    - if* (only one conditional test/success pair)
    - lif (Lispy if, False only on None   --   EVEN `False` is Truthy here)
    - lnif
********* cond
    *cond* creates nested if expressions. For each condition, if *True*, the associated form is evaluated, and if the predicate is *False*, the 'else' action is to move to the next test.
    Evaluation 'short-circuits' at this point, and the cond expression exits.

    (A straightforward macro to write would be *case*, which would test one value against a series of tests.)
    #+NAME: anonymous function in Hy
    #+BEGIN_SRC hy
    ;; In Hy
    ;; Cond in Hy
    (cond [(< 100 1)   (print "not here")]
	  [(< 100 200) (print "here")]
	  [(< 100 500) (print "Never here")])
    ;; Returns "here"
    #+END_SRC
******** Code blocks
********* `do`
    *do* can be used to gather a number of forms to be executed as a block, like *progn* in Common Lisp.

    This is handy for conditionals, for cases in which a true evaluation should trigger a series of expressions to be evaluated.
    #+NAME: DO in Hy
    #+BEGIN_SRC hy
    ;; In Hy
    (if foo
      (do (print 100)
	  (print 200))
      (do (print 300)
	  (print 400)))
    ;; prints 100 and then prints 200
    #+END_SRC
********* *let*
    A *let* form creates a scope for bindings.  Bindings made inside the *let* form shadow earlier bindings, and are removed when the *let* form is exited.

    *Note:* let in Hy binds symbol-value pairs *serially*, like let* in CL.

    *Note:* In the current version of Hy, let is in a contributed module, so we need to *require* it:
    #+NAME: *let* in Hy
    #+BEGIN_SRC hy
    ;; In Hy
    (require [hy.contrib.walk [let]])

    (setv foo 3)

    ;; let creates a local scope
    (let [foo 5 bar 7]
      (print (+ foo 100))) ; prints 105

    ;; We are back out of the scope of the let.
    (print foo) ; prints 3
    #+END_SRC

******** Interoperabiluty with Python
********* Python in Hy
    #+NAME: Using (importing) Python in Hy
    #+BEGIN_SRC hy
    ;; In Hy
    (import [numpy :as np]
            [pandas :as pd]
            [math :as torture])

    ;; In Hy, the dot is used to divide the module name from the function 
    ;; defined within that module.
    (print (torture.cos 2))
    ;; prints -0.4161468365471424

    ;; Aternative syntax
    (print (.cos torture 2))
    ;; prints -0.4161468365471424

    ;; Individual functions
    (import [math [cos sin]])
    (print (cos 2))
    ;; prints -0.4161468365471424
    #+END_SRC
********* Hy in Python
    #+NAME: Include Hy in Python code
    #+BEGIN_SRC python
    # In Python
    import hy     # do this first
    import my-hy-module as baz

    # Some function foo is defined in the module my-hy-module.hy
    zog = baz.foo(bar)

    #+END_SRC

******** MACROS
    Macros are my favorite part of Lisp. They allow the full power of a Lisp 
    language to be used at compile time to build code to be executed at run time.

    The full power of macros is well beyond the scope or time of this talk.

    Two uses of macros that should be of immediately useful:
********* Extension of syntax of a language
    A great example of this is the implementation of the `walrus` operator, 
    which was only added to Python in 3.8.

    The walrus operator,  :=   both assigns a value to a variable, and returns that value.

    #+NAME: Assignment returns None in Python
    #+BEGIN_SRC python
    # In Python
    foo = 3
    #returns 'None'

    (foo := 3)
    # both sets foo to 3, and returns the value 3 for use in surrounding code.
    #+END_SRC

    This is trivially achieved in Hy.
    #+NAME: walrus operator in Hy
    #+BEGIN_SRC hy
    ;; In Hy

    (defmacro walrus [symb val]
      `(setv ~symb ~val)
       symb)

    #+END_SRC

    then, in python
    #+NAME: Assignment returns None in Python
    #+BEGIN_SRC python
    # In Python
    from my-module import walrus

    print(f"The value is {walrus(foo 3)}.")
    print(f"I said, {foo}!")
    #+END_SRC
    should work.
********* Parameterize and simplify recurring code 
    In particular, I enjoy parameterizing creation of construction of Class definitions.

    (defmacro 

******** Functionalism
    Hy is indeed a real Lisp (a Lisp-1 for those counting), and can be used in functional style.
    The three classic higher-order functions:
********* Map
    *map* applies one function to each element of an iterable data structure.

    #+NAME: *map* in Hy
    #+BEGIN_SRC hy
    ;; In Hy
    ;; Sample function to use in map
    (defn foofun [x]
      (+ x 100))

    ;; This maps the function `foofun` across `xs`
    ;; and returns a *map* object.
    (defn foomap [xs]
      (map foofun xs))

    ;; *list* can create a list from a *map* object.
    (list (foomap [23 24 25]))
    #+END_SRC
********* Filter
    #+NAME: *filter* in Hy
    #+BEGIN_SRC hy
    ;; In Hy
    ;; Simple function to use in filter.
    (defn fizzy? [x]
      (zero? (% x 3)))

    ;; Returns a list of xs that are fizzy.
    (defn fizzies [xs]
      (list (filter fizzy? xs)))
    #+END_SRC
********* Reduce
    #+NAME: *reducer* in Hy
    #+BEGIN_SRC hy
    ;; In Hy
    ;; Returns the total fizziness of a list of numbers.
    ;; parameters are function, applicands, initial.
    (defn fizziness [xs]
      (reduce + (fizzies xs)))
    #+END_SRC
******** Interopability with Python
    The files
    - test-interop.hy
    - hytest.py
    show 
    - Inclusion of Python modules in Hy code
    - Inclusion of Hy modules in Python code

* In Summary:
We have discussed, and used relevant code, regarding:
- What Hy is
- Why coders might want to use Hy, whether Lispers, Pythonistas, or other
- An overview about how Hy works
- How to install it
- How to use Hy from a REPL
- Data types
- Walked though aspects of Hy language
  - data types, structures, classes
  - macros
  - functional programming in Hy
- Demonstrated interopability between Hy code and Python code
* Further 
Hy has been around since 2012, and has more that could be demonstrated in this talk.
- the threader macros
  - -> takes a series of expressions and
    - evaluates one
    - feeds the evaluation of the that one  as the first parameter value to the next
    - returns the output of the last.
  - ->> is like ->, but feeds the output of each as the *last* parameter value to the next
- tag macros
Tag macros are a way to make syntactic sugar. Single-input macros can be associated with any one character,
and called without any enclosing parentheses.

(Don't worry, any unicode character will do, so there are plenty.)

- anaphoric macros
* Resources
** Basics
Docs, Intro: https://docs.hylang.org/en/stable/ 

PyPI:	https://pypi.python.org/pypi/hy

Source:	https://github.com/hylang/hy

List:	hylang-discuss

IRC:	irc://chat.freenode.net/hy

Stack Overflow:	The [hy] tag

** Hy code contributed to get closer to CL
Module that adds many things from CL https://github.com/riktor/hycl/blob/master/hycl/core.hy

** Videos: 

- October 2016

A Talk About Hy

Chris McCormick 

https://www.youtube.com/watch?v=iOMvkSrPWhk

- 2014 

Paul Tagliamonte

https://www.youtube.com/watch?v=AmMaN1AokTI

- May 9, 2013 

ChiPy - Christopher Webber

https://www.youtube.com/watch?v=SB9TWabor1k

** Book
Mark Watson

*A Lisp Programmer Living in Python-Land: The Hy Programming Language*

https://leanpub.com/hy-lisp-python

* My Points of Contact:
- ~habnus-dovres

- gptix@protonmail.com

- @gptix on twitter

- this presentation is in the following repo on github - https://github.com/gptix/hy-presentation-1 
